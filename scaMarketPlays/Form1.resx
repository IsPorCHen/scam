<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        jiZ4HB79H/O3FSoqGGKyAAAAAElFTkSuQmCC
</value>
  </data>
</root>